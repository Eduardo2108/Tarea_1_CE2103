        -:    0:Source:/home/eduardo/Desktop/Projects/TareaExtra_1_CE2103/src/Simply linked list/SLL.cpp
        -:    0:Graph:/home/eduardo/Desktop/Projects/TareaExtra_1_CE2103/cmake-build-debug-coverage/CMakeFiles/TareaExtra_1_CE2103.dir/src/Simply_linked_list/SLL.cpp.gcno
        -:    0:Data:/home/eduardo/Desktop/Projects/TareaExtra_1_CE2103/cmake-build-debug-coverage/CMakeFiles/TareaExtra_1_CE2103.dir/src/Simply_linked_list/SLL.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by eduardo on 3/1/21.
        -:    3://
        -:    4:
        -:    5:#include "SLL.h"
        -:    6:#include "iostream"
        -:    7:
        -:    8:using namespace std;
        -:    9:
        -:   10:/**
        -:   11: * Method used for adding an element to the end of the list.
        -:   12: * @param element: Type int object
        -:   13: */
        3:   14:void SLL::append(int element) {
        -:   15:    Node *newElement;
        3:   16:    newElement = (new Node(element));
        3:   16-block  0
    $$$$$:   16-block  1
        3:   17:    if (this->head == nullptr) {
        3:   17-block  0
        1:   18:        this->head = this->tail = newElement;
        1:   18-block  0
        -:   19:    } else {
        2:   20:        this->tail->setNext(newElement);
        2:   20-block  0
        2:   21:        this->tail = newElement;
        -:   22:    }
        3:   23:    this->len += 1;
        3:   24:    cout << "Added : " << newElement->getValue() << " to the list on pos: " << len - 1 << "\n";
        3:   24-block  0
        3:   25:}
        -:   26:
        -:   27:/**
        -:   28: * Method for showing the list on the console.
        -:   29: */
        1:   30:void SLL::show() const {
        1:   31:    if (this->head == nullptr) {
        1:   31-block  0
    #####:   32:        cout << "[]";
    %%%%%:   32-block  0
        -:   33:    } else {
        1:   34:        cout << "[ ";
        1:   34-block  0
        1:   35:        Node *tmp = this->head;
        3:   36:        for (int i = 0; i < (this->len - 1); ++i) {
        3:   36-block  0
        2:   37:            cout << tmp->getValue() << ", ";
        2:   37-block  0
        2:   38:            tmp = tmp->getNext();
        -:   39:        }
        1:   40:        cout << tmp->getValue() << " ]";
        1:   40-block  0
        -:   41:    }
        1:   42:}
